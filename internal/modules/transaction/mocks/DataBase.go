// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// DataBase is an autogenerated mock type for the DataBase type
type DataBase struct {
	mock.Mock
}

// GetCoinsByUserID provides a mock function with given fields: ctx, userID
func (_m *DataBase) GetCoinsByUserID(ctx context.Context, userID int) (int, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetCoinsByUserID")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (int, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) int); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIDByUsername provides a mock function with given fields: ctx, username
func (_m *DataBase) GetIDByUsername(ctx context.Context, username string) (int, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetIDByUsername")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransferCoins provides a mock function with given fields: ctx, fromUserID, toUserID, coins
func (_m *DataBase) TransferCoins(ctx context.Context, fromUserID int, toUserID int, coins int) error {
	ret := _m.Called(ctx, fromUserID, toUserID, coins)

	if len(ret) == 0 {
		panic("no return value specified for TransferCoins")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int) error); ok {
		r0 = rf(ctx, fromUserID, toUserID, coins)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDataBase creates a new instance of DataBase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDataBase(t interface {
	mock.TestingT
	Cleanup(func())
}) *DataBase {
	mock := &DataBase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
