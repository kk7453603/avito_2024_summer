// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"
	models "github.com/kk7453603/avito_2024_summer/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// DataBase is an autogenerated mock type for the DataBase type
type DataBase struct {
	mock.Mock
}

// GetCoinsByUserID provides a mock function with given fields: ctx, userID
func (_m *DataBase) GetCoinsByUserID(ctx context.Context, userID int) (int, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetCoinsByUserID")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (int, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) int); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetItemBySlug provides a mock function with given fields: ctx, slug
func (_m *DataBase) GetItemBySlug(ctx context.Context, slug string) (*models.Item, error) {
	ret := _m.Called(ctx, slug)

	if len(ret) == 0 {
		panic("no return value specified for GetItemBySlug")
	}

	var r0 *models.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Item, error)); ok {
		return rf(ctx, slug)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Item); ok {
		r0 = rf(ctx, slug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MakePurchaseByUserID provides a mock function with given fields: ctx, userID, item
func (_m *DataBase) MakePurchaseByUserID(ctx context.Context, userID int, item *models.Item) error {
	ret := _m.Called(ctx, userID, item)

	if len(ret) == 0 {
		panic("no return value specified for MakePurchaseByUserID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *models.Item) error); ok {
		r0 = rf(ctx, userID, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDataBase creates a new instance of DataBase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDataBase(t interface {
	mock.TestingT
	Cleanup(func())
}) *DataBase {
	mock := &DataBase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
