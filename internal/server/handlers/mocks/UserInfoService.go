// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/kk7453603/avito_2024_summer/internal/models"
)

// UserInfoService is an autogenerated mock type for the UserInfoService type
type UserInfoService struct {
	mock.Mock
}

// GetCoinHistory provides a mock function with given fields: ctx, userID
func (_m *UserInfoService) GetCoinHistory(ctx context.Context, userID int) (*models.CoinHistory, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetCoinHistory")
	}

	var r0 *models.CoinHistory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*models.CoinHistory, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *models.CoinHistory); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.CoinHistory)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCoins provides a mock function with given fields: ctx, userID
func (_m *UserInfoService) GetCoins(ctx context.Context, userID int) (int, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetCoins")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (int, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) int); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInventory provides a mock function with given fields: ctx, userID
func (_m *UserInfoService) GetInventory(ctx context.Context, userID int) (*[]models.Merch, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetInventory")
	}

	var r0 *[]models.Merch
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*[]models.Merch, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *[]models.Merch); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.Merch)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserInfoService creates a new instance of UserInfoService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserInfoService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserInfoService {
	mock := &UserInfoService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
