// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/kk7453603/avito_2024_summer/internal/models"
)

// AuthService is an autogenerated mock type for the AuthService type
type AuthService struct {
	mock.Mock
}

// ComparePassword provides a mock function with given fields: hashedPasswd, passwd
func (_m *AuthService) ComparePassword(hashedPasswd string, passwd string) bool {
	ret := _m.Called(hashedPasswd, passwd)

	if len(ret) == 0 {
		panic("no return value specified for ComparePassword")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(hashedPasswd, passwd)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetOrRegUser provides a mock function with given fields: ctx, username, password
func (_m *AuthService) GetOrRegUser(ctx context.Context, username string, password string) (*models.User, bool, error) {
	ret := _m.Called(ctx, username, password)

	if len(ret) == 0 {
		panic("no return value specified for GetOrRegUser")
	}

	var r0 *models.User
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*models.User, bool, error)); ok {
		return rf(ctx, username, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.User); ok {
		r0 = rf(ctx, username, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) bool); ok {
		r1 = rf(ctx, username, password)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(ctx, username, password)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewAuthService creates a new instance of AuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthService {
	mock := &AuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
